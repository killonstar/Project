text <- paste0('list1 <- list.append(list1, bas1.',n1[i],')')
eval(parse(text=text))
}
list1 <- do.call(merge, list1)
return(list1)
}
# Приращение
Increment <- function(n1){
x <- as.data.frame(log(n1 / lag(n1)))
x[is.na(x)] <- 0
return(x)
}
# Ковариация
Covar <- function(n1){
cov(incr.index, n1)
}
# Беты
Beta <- function(n1){
n1/var.index
}
# Коэффициент неравномерности (большую должны делить на меньшую)
Irr <- function(n1,n2){
x1 <- length(n1)
x2 <- length(n2)
if(x1 < x2){
z <- x2/x1
}
else{
z <- x1/x2
}
return(z)
}
# Расчет суммы
Summa <- function(n1,n2){
x1 <- rowSums(as.data.frame(n1))
x2 <- rowSums(as.data.frame(n2))
x3 <- x1 + x2
return(x3)
}
# Расчет первой корзины по отношению ко второй
Inter2 <- function(n1,n2){
x1 <- length(n1)
x2 <- length(n2)
Inter1 <- function(n1){
sum.betaall/n1*irrfac
}
if(x1 < x2){
z <- lapply(n1, function(x) Inter1(x))
}
else
{
z <- lapply(n2, function(x) Inter1(x))
}
return(z)
}
Inter4 <- function(n1,n2){
x1 <- length(n1)
x2 <- length(n2)
Inter3 <- function(n1){
sum.betaall/n1
}
if(x1 > x2){
z <- lapply(n1, function(x) Inter3(x))
}
else
{
z <- lapply(n2, function(x) Inter3(x))
}
return(z)
}
# Идеальный вес в процентах
WeightCOOL <- function(n1,n2){
x1 <- n1
x2 <- n2
y1 <- length(inter.bas1)
y2 <- length(inter.bas2)
z1 <- length(tickers1)
z2 <- length(tickers1)
Weightcool <- function(n1){
n1/sum.weightall*100
}
weightper.bas1 <- lapply(x1, function(x) Weightcool(x))
weightper.bas2 <- lapply(x2, function(x) Weightcool(x))
weightper.basall <- list()
if(y1 == z1){
weightper.basall <- list.append(weightper.basall, weightper.bas1, weightper.bas2)
weightper.basall <- round(as.numeric(as.data.frame(weightper.basall)), digits = 3)
}
else{
weightper.basall <- list.append(weightper.basall, weightper.bas2, weightper.bas1)
weightper.basall <- round(as.numeric(as.data.frame(weightper.basall)), digits = 3)
}
return(weightper.basall)
}
PriceInfo <- function(n1,n2)
{
ob.mean.bas1 <- as.data.frame(as.list(colMeans(n1, na.rm = T))) # mean.bas1
ob.mean.bas2 <- as.data.frame(as.list(colMeans(n2, na.rm = T))) # mean.bas1
ob.price1 <- round(ob.mean.bas1, digits = 3) * writing1 # Цена первой корзины с учетом лотов для фьючерсов # price1
ob.price2 <- round(ob.mean.bas2, digits = 3) * writing2 # Цена второй корзины с учетом лотов для фьючерсов # price2
ob.sum.meanall <- rowSums(ob.price1) + rowSums(ob.price2) # Общая сумма цен с лотами в двух корзинах # sum.meanall
x <- ls()
vec <- grep("ob.", x) %>% x[.]
len <- length(vec)
list4 <- list()
for(i in 1:len){
text <- paste0('list4 <- list.append(list4,',vec[i],')')
eval(parse(text=text))
}
return(list4)
}
# Создание комбинации и объединение корзин
FunCOMBIN <- function(){
length.basaall <- length(tickers1) + length(tickers2) # Количество инструментов в корзинах
meanbas.all <- list() # Empty list
m1 <- price.info[[1]]
m2 <- price.info[[2]]
meanbas.all <- round(unlist(list.append(meanbas.all, m1, m2)), digits = 3) # Объединение двух корзин в вектор
lotik <- seq(1,8,by=1) # Создание комбинации
combin <- matrix(rep(lotik, length.basaall), ncol = length.basaall)
combin <- expand.grid(as.data.frame.matrix(combin)) # Готовая комбинация
combin.basall <- data.frame(mapply(`*`,combin,meanbas.all)) # Цена с учетом лотов
combin.sum <- as.data.frame(rowSums(combin.basall)) # сумма цен с лотами
combin.percent <- round(data.frame(mapply(`/`,combin.basall,combin.sum))*100, digits = 3) #
combin.percent <- as.data.frame(list.append(combin.percent, combin))
combin.percent$per3 <- round(abs(combin.percent$V1 - weightper.basall[1]), digits = 7)
q <- min(combin.percent$per3)
lot <- combin.percent[combin.percent$per3 == q,] # Оптимальные значения
lot$per4 <- round(abs(lot$V2 - weightper.basall[2]), digits = 7)
q <- min(lot$per4)
lot <- lot[lot$per4 == q,] # Оптимальные значения
Result <- function(){
com <- combin.percent
wec <- weightper.basall[1:2]
two <- com
copy.two <- two
copy.two$TWO <- copy.two$V1 + copy.two$V2
copy.two$IDTWO <- wec[1] + wec[2]
copy.two$ReTWO <- abs(copy.two$IDTWO - copy.two$TWO)
three <- copy.two[copy.two$ReTWO <= 12,]
three$V1R <- abs(wec[1] - three$V1)
four <- three[three$V1R <= 3,]
four$V2R <- abs(wec[2] - four$V2)
five <- four[four$V2R <= 3,]
return(five)
}
return(five)
}
# Спред
Spread <- function(){
bas1.sum <- as.data.frame(list1) # Date.frame
bas1.sum <- data.frame(mapply(`*`,bas1.sum,writing1)) # Корректируем цены для фьючерсов
bas1.sum <- data.frame(mapply(`*`,bas1.sum,lot.spread1)) # Умножаем на количество лотов, которые мы выбрали для первой корзины
bas1.sum <- as.data.frame(rowSums(bas1.sum)) # сумма цен с лотами
bas2.sum <- as.data.frame(list2) # Date.frame
bas2.sum <- data.frame(mapply(`*`,bas2.sum,writing2)) # Корректируем цены для фьючерсов
bas2.sum <- data.frame(mapply(`*`,bas2.sum,lot.spread2)) # Умножаем на количество лотов, которые мы выбрали для второй корзины
bas2.sum <- as.data.frame(rowSums(bas2.sum)) # сумма цен с лотами
basall.spread <- abs(bas1.sum - bas2.sum)
a <- plot(basall.spread[,1], type = "l") # График спреда
min.spread <- min(basall.spread[,1]); max.spread <- max(basall.spread[,1])
mean.spread <- c(min.spread, max.spread)
mean.spread <- abs(mean(mean.spread)) # Средний спред
abline(h = mean.spread, col = "red", lw = 2) # Линия среднего спреда на графике
}
library(rusquant)
library(quantmod)
library(magrittr)
library(rlist)
library(lpSolve)
# Packages
source("packages/libfun.R")
# Основные параметры (время и период)
from.date <- "2013-09-26" # Параметр для изменения !!!
to.date <- "2014-09-26" # Параметр для изменения !!!
period <- "day" # Параметр для изменения !!!
# Первая корзина
tickers1 <- c("LKOH", "GAZP") # Параметр для изменения !!!
list1 <- BasFun1(tickers1,from.date,to.date,period) # Первая корзина
# Вторая корзина
tickers2 <- c("SBER") # Параметр для изменения !!!
list2 <- BasFun1(tickers2,from.date,to.date,period) # Вторая корзина
# Ввод индекса
tickers3 <- c("MICEX") # Параметр для изменения !!!
list3 <- BasFun1(tickers3,from.date,to.date,period) # Вторая корзина
# Приращения, ковариация, дисперсия индекса и беты
incr.bas1 <- Increment(list1) # Приращение первой корзины
incr.bas2 <- Increment(list2) # Приращение второй корзины
incr.index <- Increment(list3) # Приращение индекса
var.index <- as.numeric(lapply(incr.index, function(x) var(x))) # Дисперсия индекса
covar.bas1 <- Covar(incr.bas1) # Ковариация первой корзины
covar.bas2 <- Covar(incr.bas2) # Ковариация второй корзины
beta.bas1 <- lapply(covar.bas1, function(x) Beta(x)) # Беты первой корзины
beta.bas2 <- lapply(covar.bas2, function(x) Beta(x)) # Беты второй корзины
irrfac <- Irr(tickers1,tickers2) # Коэффициент неравномерности
sum.betaall <- Summa(beta.bas1, beta.bas2) # Общая сумма бет в двух корзинах
inter.bas1 <- Inter2(beta.bas1,beta.bas2) # Расчет корзин
inter.bas2 <- Inter4(beta.bas1,beta.bas2) # Расчет корзин
# сумма весов двух корзин
sum.weightall <- Summa(inter.bas1, inter.bas2) # Общая сумма весов в двух корзинах
weightper.basall <- WeightCOOL(inter.bas1,inter.bas2) # Идеальный вес в процентах
# Спецификация контрактов (количество лотов)
tick1 <- sort(tickers1) # В алфавитном порядке
tick2 <- sort(tickers2) # В алфавитном порядке
# tick1 вывести для вписания правильного значения лотов
writing1 <- c(10,100) # Параметры для изменения !!!
# tick2 вывести для вписания правильного значения лотов
writing2 <- c(100) # Параметры для изменения !!!
# Средние цены, ср.цены с учетом лотов, сумма ср.цен с лотами в двух корзинах
price.info <- PriceInfo(list1,list2)
# Оптимальное кол-во лотов
lot <- FunCOMBIN() # Таблица оптимальных лотов (вывести)
View(five)
lot <- FunCOMBIN() # Таблица оптимальных лотов (вывести)
library(rusquant)
library(quantmod)
library(magrittr)
library(rlist)
library(lpSolve)
# Packages
source("packages/libfun.R")
# Основные параметры (время и период)
from.date <- "2013-09-26" # Параметр для изменения !!!
to.date <- "2014-09-26" # Параметр для изменения !!!
period <- "day" # Параметр для изменения !!!
# Первая корзина
tickers1 <- c("LKOH", "GAZP") # Параметр для изменения !!!
list1 <- BasFun1(tickers1,from.date,to.date,period) # Первая корзина
# Вторая корзина
tickers2 <- c("SBER") # Параметр для изменения !!!
list2 <- BasFun1(tickers2,from.date,to.date,period) # Вторая корзина
# Ввод индекса
tickers3 <- c("MICEX") # Параметр для изменения !!!
list3 <- BasFun1(tickers3,from.date,to.date,period) # Вторая корзина
# Приращения, ковариация, дисперсия индекса и беты
incr.bas1 <- Increment(list1) # Приращение первой корзины
incr.bas2 <- Increment(list2) # Приращение второй корзины
incr.index <- Increment(list3) # Приращение индекса
var.index <- as.numeric(lapply(incr.index, function(x) var(x))) # Дисперсия индекса
covar.bas1 <- Covar(incr.bas1) # Ковариация первой корзины
covar.bas2 <- Covar(incr.bas2) # Ковариация второй корзины
beta.bas1 <- lapply(covar.bas1, function(x) Beta(x)) # Беты первой корзины
beta.bas2 <- lapply(covar.bas2, function(x) Beta(x)) # Беты второй корзины
irrfac <- Irr(tickers1,tickers2) # Коэффициент неравномерности
sum.betaall <- Summa(beta.bas1, beta.bas2) # Общая сумма бет в двух корзинах
inter.bas1 <- Inter2(beta.bas1,beta.bas2) # Расчет корзин
inter.bas2 <- Inter4(beta.bas1,beta.bas2) # Расчет корзин
# сумма весов двух корзин
sum.weightall <- Summa(inter.bas1, inter.bas2) # Общая сумма весов в двух корзинах
weightper.basall <- WeightCOOL(inter.bas1,inter.bas2) # Идеальный вес в процентах
# Спецификация контрактов (количество лотов)
tick1 <- sort(tickers1) # В алфавитном порядке
tick2 <- sort(tickers2) # В алфавитном порядке
# tick1 вывести для вписания правильного значения лотов
writing1 <- c(10,100) # Параметры для изменения !!!
# tick2 вывести для вписания правильного значения лотов
writing2 <- c(100) # Параметры для изменения !!!
# Средние цены, ср.цены с учетом лотов, сумма ср.цен с лотами в двух корзинах
price.info <- PriceInfo(list1,list2)
length.basaall <- length(tickers1) + length(tickers2) # Количество инструментов в корзинах
meanbas.all <- list() # Empty list
price.info[[3]]
price.info[[4]]
m1 <- price.info[[3]]
m2 <- price.info[[4]]
meanbas.all <- round(unlist(list.append(meanbas.all, m1, m2)), digits = 3) # Объединение двух корзин в вектор
lotik <- seq(1,8,by=1) # Создание комбинации
combin <- matrix(rep(lotik, length.basaall), ncol = length.basaall)
combin <- expand.grid(as.data.frame.matrix(combin)) # Готовая комбинация
combin.basall <- data.frame(mapply(`*`,combin,meanbas.all)) # Цена с учетом лотов
combin.sum <- as.data.frame(rowSums(combin.basall)) # сумма цен с лотами
combin.percent <- round(data.frame(mapply(`/`,combin.basall,combin.sum))*100, digits = 3) #
combin.percent <- as.data.frame(list.append(combin.percent, combin))
View(combin.percent)
com <- combin.percent
wec <- weightper.basall[1:2]
two <- com
copy.two <- two
copy.two$TWO <- copy.two$V1 + copy.two$V2
copy.two$IDTWO <- wec[1] + wec[2]
copy.two$ReTWO <- abs(copy.two$IDTWO - copy.two$TWO)
three <- copy.two[copy.two$ReTWO <= 12,]
three$V1R <- abs(wec[1] - three$V1)
four <- three[three$V1R <= 3,]
four$V2R <- abs(wec[2] - four$V2)
five <- four[four$V2R <= 3,]
View(five)
weightper.basall
copy.two$V2
copy.two[2,]
copy.two[,2]
wec[1]
wec[1] + wec[2]
library(rusquant)
library(quantmod)
library(magrittr)
library(rlist)
library(lpSolve)
# Packages
source("packages/libfun.R")
# Основные параметры (время и период)
from.date <- "2013-09-26" # Параметр для изменения !!!
to.date <- "2014-09-26" # Параметр для изменения !!!
period <- "day" # Параметр для изменения !!!
# Первая корзина
tickers1 <- c("LKOH", "GAZP") # Параметр для изменения !!!
list1 <- BasFun1(tickers1,from.date,to.date,period) # Первая корзина
# Вторая корзина
tickers2 <- c("SBER") # Параметр для изменения !!!
list2 <- BasFun1(tickers2,from.date,to.date,period) # Вторая корзина
# Ввод индекса
tickers3 <- c("MICEX") # Параметр для изменения !!!
list3 <- BasFun1(tickers3,from.date,to.date,period) # Вторая корзина
# Приращения, ковариация, дисперсия индекса и беты
incr.bas1 <- Increment(list1) # Приращение первой корзины
incr.bas2 <- Increment(list2) # Приращение второй корзины
incr.index <- Increment(list3) # Приращение индекса
var.index <- as.numeric(lapply(incr.index, function(x) var(x))) # Дисперсия индекса
covar.bas1 <- Covar(incr.bas1) # Ковариация первой корзины
covar.bas2 <- Covar(incr.bas2) # Ковариация второй корзины
beta.bas1 <- lapply(covar.bas1, function(x) Beta(x)) # Беты первой корзины
beta.bas2 <- lapply(covar.bas2, function(x) Beta(x)) # Беты второй корзины
irrfac <- Irr(tickers1,tickers2) # Коэффициент неравномерности
sum.betaall <- Summa(beta.bas1, beta.bas2) # Общая сумма бет в двух корзинах
inter.bas1 <- Inter2(beta.bas1,beta.bas2) # Расчет корзин
inter.bas2 <- Inter4(beta.bas1,beta.bas2) # Расчет корзин
# сумма весов двух корзин
sum.weightall <- Summa(inter.bas1, inter.bas2) # Общая сумма весов в двух корзинах
weightper.basall <- WeightCOOL(inter.bas1,inter.bas2) # Идеальный вес в процентах
# Спецификация контрактов (количество лотов)
tick1 <- sort(tickers1) # В алфавитном порядке
tick2 <- sort(tickers2) # В алфавитном порядке
# tick1 вывести для вписания правильного значения лотов
writing1 <- c(10,100) # Параметры для изменения !!!
# tick2 вывести для вписания правильного значения лотов
writing2 <- c(100) # Параметры для изменения !!!
# Средние цены, ср.цены с учетом лотов, сумма ср.цен с лотами в двух корзинах
price.info <- PriceInfo(list1,list2)
# Оптимальное кол-во лотов
length.basaall <- length(tickers1) + length(tickers2) # Количество инструментов в корзинах
meanbas.all <- list() # Empty list
m1 <- price.info[[3]]
m2 <- price.info[[4]]
meanbas.all <- round(unlist(list.append(meanbas.all, m1, m2)), digits = 3) # Объединение двух корзин в вектор
lotik <- seq(1,8,by=1) # Создание комбинации
combin <- matrix(rep(lotik, length.basaall), ncol = length.basaall)
combin <- expand.grid(as.data.frame.matrix(combin)) # Готовая комбинация
combin.basall <- data.frame(mapply(`*`,combin,meanbas.all)) # Цена с учетом лотов
combin.sum <- as.data.frame(rowSums(combin.basall)) # сумма цен с лотами
combin.percent <- round(data.frame(mapply(`/`,combin.basall,combin.sum))*100, digits = 3) #
combin.percent <- as.data.frame(list.append(combin.percent, combin))
Result <- function(n1,n2){
com <- n1
wec <- n2
two <- com
copy.two <- two
copy.two$TWO <- copy.two[,1] + copy.two[,2]
copy.two$IDTWO <- wec[1] + wec[2]
copy.two$ReTWO <- abs(copy.two$IDTWO - copy.two$TWO)
three <- copy.two[copy.two$ReTWO <= 12,]
three$V1R <- abs(wec[1] - three$V1)
four <- three[three$V1R <= 3,]
four$V2R <- abs(wec[2] - four$V2)
five <- four[four$V2R <= 3,]
}
test <- Result(combin.percent,weightper.basall[1:2])
View(test)
library(rusquant)
library(quantmod)
library(magrittr)
library(rlist)
library(lpSolve)
# Packages
source("packages/libfun.R")
# Основные параметры (время и период)
from.date <- "2013-09-26" # Параметр для изменения !!!
to.date <- "2014-09-26" # Параметр для изменения !!!
period <- "day" # Параметр для изменения !!!
# Первая корзина
tickers1 <- c("LKOH", "GAZP") # Параметр для изменения !!!
list1 <- BasFun1(tickers1,from.date,to.date,period) # Первая корзина
# Вторая корзина
tickers2 <- c("SBER") # Параметр для изменения !!!
list2 <- BasFun1(tickers2,from.date,to.date,period) # Вторая корзина
# Ввод индекса
tickers3 <- c("MICEX") # Параметр для изменения !!!
list3 <- BasFun1(tickers3,from.date,to.date,period) # Вторая корзина
# Приращения, ковариация, дисперсия индекса и беты
incr.bas1 <- Increment(list1) # Приращение первой корзины
incr.bas2 <- Increment(list2) # Приращение второй корзины
incr.index <- Increment(list3) # Приращение индекса
var.index <- as.numeric(lapply(incr.index, function(x) var(x))) # Дисперсия индекса
covar.bas1 <- Covar(incr.bas1) # Ковариация первой корзины
covar.bas2 <- Covar(incr.bas2) # Ковариация второй корзины
beta.bas1 <- lapply(covar.bas1, function(x) Beta(x)) # Беты первой корзины
beta.bas2 <- lapply(covar.bas2, function(x) Beta(x)) # Беты второй корзины
irrfac <- Irr(tickers1,tickers2) # Коэффициент неравномерности
sum.betaall <- Summa(beta.bas1, beta.bas2) # Общая сумма бет в двух корзинах
inter.bas1 <- Inter2(beta.bas1,beta.bas2) # Расчет корзин
inter.bas2 <- Inter4(beta.bas1,beta.bas2) # Расчет корзин
# сумма весов двух корзин
sum.weightall <- Summa(inter.bas1, inter.bas2) # Общая сумма весов в двух корзинах
weightper.basall <- WeightCOOL(inter.bas1,inter.bas2) # Идеальный вес в процентах
# Спецификация контрактов (количество лотов)
tick1 <- sort(tickers1) # В алфавитном порядке
tick2 <- sort(tickers2) # В алфавитном порядке
# tick1 вывести для вписания правильного значения лотов
writing1 <- c(10,100) # Параметры для изменения !!!
# tick2 вывести для вписания правильного значения лотов
writing2 <- c(100) # Параметры для изменения !!!
# Средние цены, ср.цены с учетом лотов, сумма ср.цен с лотами в двух корзинах
price.info <- PriceInfo(list1,list2)
# Оптимальное кол-во лотов
lot <- FunCOMBIN() # Таблица оптимальных лотов (вывести)
View(lot)
library(rusquant)
library(quantmod)
library(magrittr)
library(rlist)
library(lpSolve)
# Packages
source("packages/libfun.R")
# Основные параметры (время и период)
from.date <- "2013-09-26" # Параметр для изменения !!!
to.date <- "2014-09-26" # Параметр для изменения !!!
period <- "day" # Параметр для изменения !!!
# Первая корзина
tickers1 <- c("LKOH", "GAZP") # Параметр для изменения !!!
list1 <- BasFun1(tickers1,from.date,to.date,period) # Первая корзина
# Вторая корзина
tickers2 <- c("SBER") # Параметр для изменения !!!
list2 <- BasFun1(tickers2,from.date,to.date,period) # Вторая корзина
# Ввод индекса
tickers3 <- c("MICEX") # Параметр для изменения !!!
list3 <- BasFun1(tickers3,from.date,to.date,period) # Вторая корзина
# Приращения, ковариация, дисперсия индекса и беты
incr.bas1 <- Increment(list1) # Приращение первой корзины
incr.bas2 <- Increment(list2) # Приращение второй корзины
incr.index <- Increment(list3) # Приращение индекса
var.index <- as.numeric(lapply(incr.index, function(x) var(x))) # Дисперсия индекса
covar.bas1 <- Covar(incr.bas1) # Ковариация первой корзины
covar.bas2 <- Covar(incr.bas2) # Ковариация второй корзины
beta.bas1 <- lapply(covar.bas1, function(x) Beta(x)) # Беты первой корзины
beta.bas2 <- lapply(covar.bas2, function(x) Beta(x)) # Беты второй корзины
irrfac <- Irr(tickers1,tickers2) # Коэффициент неравномерности
sum.betaall <- Summa(beta.bas1, beta.bas2) # Общая сумма бет в двух корзинах
inter.bas1 <- Inter2(beta.bas1,beta.bas2) # Расчет корзин
inter.bas2 <- Inter4(beta.bas1,beta.bas2) # Расчет корзин
# сумма весов двух корзин
sum.weightall <- Summa(inter.bas1, inter.bas2) # Общая сумма весов в двух корзинах
weightper.basall <- WeightCOOL(inter.bas1,inter.bas2) # Идеальный вес в процентах
# Спецификация контрактов (количество лотов)
tick1 <- sort(tickers1) # В алфавитном порядке
tick2 <- sort(tickers2) # В алфавитном порядке
# tick1 вывести для вписания правильного значения лотов
writing1 <- c(10,100) # Параметры для изменения !!!
# tick2 вывести для вписания правильного значения лотов
writing2 <- c(100) # Параметры для изменения !!!
# Средние цены, ср.цены с учетом лотов, сумма ср.цен с лотами в двух корзинах
price.info <- PriceInfo(list1,list2)
# Оптимальное кол-во лотов
lot <- FunCOMBIN() # Таблица оптимальных лотов (вывести)
library(rusquant)
library(quantmod)
library(magrittr)
library(rlist)
library(lpSolve)
# Packages
source("packages/libfun.R")
# Основные параметры (время и период)
from.date <- "2013-09-26" # Параметр для изменения !!!
to.date <- "2014-09-26" # Параметр для изменения !!!
period <- "day" # Параметр для изменения !!!
# Первая корзина
tickers1 <- c("LKOH", "GAZP") # Параметр для изменения !!!
list1 <- BasFun1(tickers1,from.date,to.date,period) # Первая корзина
# Вторая корзина
tickers2 <- c("SBER") # Параметр для изменения !!!
list2 <- BasFun1(tickers2,from.date,to.date,period) # Вторая корзина
# Ввод индекса
tickers3 <- c("MICEX") # Параметр для изменения !!!
list3 <- BasFun1(tickers3,from.date,to.date,period) # Вторая корзина
# Приращения, ковариация, дисперсия индекса и беты
incr.bas1 <- Increment(list1) # Приращение первой корзины
incr.bas2 <- Increment(list2) # Приращение второй корзины
incr.index <- Increment(list3) # Приращение индекса
var.index <- as.numeric(lapply(incr.index, function(x) var(x))) # Дисперсия индекса
covar.bas1 <- Covar(incr.bas1) # Ковариация первой корзины
covar.bas2 <- Covar(incr.bas2) # Ковариация второй корзины
beta.bas1 <- lapply(covar.bas1, function(x) Beta(x)) # Беты первой корзины
beta.bas2 <- lapply(covar.bas2, function(x) Beta(x)) # Беты второй корзины
irrfac <- Irr(tickers1,tickers2) # Коэффициент неравномерности
sum.betaall <- Summa(beta.bas1, beta.bas2) # Общая сумма бет в двух корзинах
inter.bas1 <- Inter2(beta.bas1,beta.bas2) # Расчет корзин
inter.bas2 <- Inter4(beta.bas1,beta.bas2) # Расчет корзин
# сумма весов двух корзин
sum.weightall <- Summa(inter.bas1, inter.bas2) # Общая сумма весов в двух корзинах
weightper.basall <- WeightCOOL(inter.bas1,inter.bas2) # Идеальный вес в процентах
# Спецификация контрактов (количество лотов)
tick1 <- sort(tickers1) # В алфавитном порядке
tick2 <- sort(tickers2) # В алфавитном порядке
# tick1 вывести для вписания правильного значения лотов
writing1 <- c(10,100) # Параметры для изменения !!!
# tick2 вывести для вписания правильного значения лотов
writing2 <- c(100) # Параметры для изменения !!!
# Средние цены, ср.цены с учетом лотов, сумма ср.цен с лотами в двух корзинах
price.info <- PriceInfo(list1,list2)
# Оптимальное кол-во лотов
lot <- FunCOMBIN() # Таблица оптимальных лотов (вывести)
View(lot)
View(lot)
weightper.basall
