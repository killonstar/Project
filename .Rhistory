origin = "1970-01-01")), "-", )[[1]][3])
to.y <- as.numeric(strsplit(as.character(as.Date(to,
origin = "1970-01-01")), "-", )[[1]][1])
to.m <- as.numeric(strsplit(as.character(as.Date(to,
origin = "1970-01-01")), "-", )[[1]][2]) - 1
to.d <- as.numeric(strsplit(as.character(as.Date(to,
origin = "1970-01-01")), "-", )[[1]][3])
Symbols.name <- getSymbolLookup()[[Symbols[[i]]]]$name
Symbols.name <- ifelse(is.null(Symbols.name), Symbols[[i]],
Symbols.name)
if (verbose)
cat("downloading ", Symbols.name, ".....\n\n")
Symbols.id <- finam.stock.list[Symbols.name]
if (is.na(Symbols.id)) {
if (verbose)
cat("Don't know about", Symbols[[i]], "\n\n")
next
}
stock.URL <- paste(finam.URL, "p=", p, "&em=", Symbols.id,
"&df=", from.d, "&mf=", from.m, "&yf=", from.y,
"&dt=", to.d, "&mt=", to.m, "&yt=", to.y, "&cn=",
Symbols.name, sep = "")
if (verbose)
cat(stock.URL)
tmp <- tempfile()
if (p == 1) {
lts <- http.get(finam.HOST, paste(stock.URL, "&datf=6",
sep = ""), referer = "http://www.finam.ru/analysis/export/default.asp",
verbose = verbose)
write(lts, file = tmp)
}
else {
stock.URL <- paste("http://", finam.HOST, stock.URL,
"&datf=1", sep = "")
download.file(stock.URL, destfile = tmp, quiet = !verbose)
}
fr <- read.csv(tmp, as.is = TRUE, colClasses = "character")
unlink(tmp)
if (verbose)
cat("done.\n")
if (p == 1) {
fr <- xts(apply(as.matrix(fr[, (5:6)]), 2, as.numeric),
as.POSIXct(strptime(paste(fr[, 3], fr[, 4]),
"%Y%m%d %H%M%S")), src = "finam", updated = Sys.time())
colnames(fr) <- paste(toupper(gsub("\\^", "", Symbols.name)),
c("Close", "Volume"), sep = ".")
}
else if (p > 7) {
fr <- xts(apply(as.matrix(fr[, (5:9)]), 2, as.numeric),
as.Date(strptime(fr[, 3], "%Y%m%d")), src = "finam",
updated = Sys.time())
colnames(fr) <- paste(toupper(gsub("\\^", "", Symbols.name)),
c("Open", "High", "Low", "Close", "Volume"),
sep = ".")
}
else {
fr <- xts(apply(as.matrix(fr[, (5:9)]), 2, as.numeric),
as.POSIXct(strptime(paste(fr[, 3], fr[, 4]),
"%Y%m%d %H%M%S")), src = "finam", updated = Sys.time())
colnames(fr) <- paste(toupper(gsub("\\^", "", Symbols.name)),
c("Open", "High", "Low", "Close", "Volume"),
sep = ".")
}
fr <- convert.time.series(fr = fr, return.class = return.class)
if (is.xts(fr) && p > 7)
indexClass(fr) <- index.class
Symbols[[i]] <- toupper(gsub("\\^", "", Symbols[[i]]))
if (auto.assign)
assign(Symbols[[i]], fr, env)
if (i >= 5 && length(Symbols) > 5) {
message("pausing 1 second between requests for more than 5 symbols")
Sys.sleep(1)
}
}
if (auto.assign)
return(Symbols)
return(fr)
}
library(rusquant)
gS <- function (Symbols, env, return.class = "xts", index.class = "Date",
from = "2007-01-01", to = Sys.Date(), adjust = FALSE, period = "day",
...)
{
importDefaults("getSymbols.Finam")
this.env <- environment()
for (var in names(list(...))) {
assign(var, list(...)[[var]], this.env)
}
default.return.class <- return.class
default.from <- from
default.to <- to
if (missing(verbose))
verbose <- FALSE
if (missing(auto.assign))
auto.assign <- FALSE
p <- 0
if ("tick" == period)
p <- 1
if ("1min" == period)
p <- 2
if ("5min" == period)
p <- 3
if ("10min" == period)
p <- 4
if ("15min" == period)
p <- 5
if ("30min" == period)
p <- 6
if ("hour" == period)
p <- 7
if ("day" == period)
p <- 8
if ("week" == period)
p <- 9
if ("month" == period)
p <- 10
if (p == 0) {
message(paste("Unkown period ", period))
}
finam.HOST <- "78.41.196.47"
finam.URL <- "/table.csv?d=d&market=1&f=table&e=.csv&dtf=1&tmf=1&MSOR=0&sep=1&sep2=1&at=1&"
if (!exists("finam.stock.list")) {
finam.stock.list <- loadStockList()
assign("finam.stock.list", finam.stock.list, env)
}
fr <- NaN
for (i in 1:length(Symbols)) {
return.class <- getSymbolLookup()[[Symbols[[i]]]]$return.class
return.class <- ifelse(is.null(return.class), default.return.class,
return.class)
from <- getSymbolLookup()[[Symbols[[i]]]]$from
from <- if (is.null(from))
default.from
else from
to <- getSymbolLookup()[[Symbols[[i]]]]$to
to <- if (is.null(to))
default.to
else to
from.y <- as.numeric(strsplit(as.character(as.Date(from,
origin = "1970-01-01")), "-", )[[1]][1])
from.m <- as.numeric(strsplit(as.character(as.Date(from,
origin = "1970-01-01")), "-", )[[1]][2]) - 1
from.d <- as.numeric(strsplit(as.character(as.Date(from,
origin = "1970-01-01")), "-", )[[1]][3])
to.y <- as.numeric(strsplit(as.character(as.Date(to,
origin = "1970-01-01")), "-", )[[1]][1])
to.m <- as.numeric(strsplit(as.character(as.Date(to,
origin = "1970-01-01")), "-", )[[1]][2]) - 1
to.d <- as.numeric(strsplit(as.character(as.Date(to,
origin = "1970-01-01")), "-", )[[1]][3])
Symbols.name <- getSymbolLookup()[[Symbols[[i]]]]$name
Symbols.name <- ifelse(is.null(Symbols.name), Symbols[[i]],
Symbols.name)
if (verbose)
cat("downloading ", Symbols.name, ".....\n\n")
Symbols.id <- finam.stock.list[Symbols.name]
if (is.na(Symbols.id)) {
if (verbose)
cat("Don't know about", Symbols[[i]], "\n\n")
next
}
stock.URL <- paste(finam.URL, "p=", p, "&em=", Symbols.id,
"&df=", from.d, "&mf=", from.m, "&yf=", from.y,
"&dt=", to.d, "&mt=", to.m, "&yt=", to.y, "&cn=",
Symbols.name, sep = "")
if (verbose)
cat(stock.URL)
tmp <- tempfile()
if (p == 1) {
lts <- http.get(finam.HOST, paste(stock.URL, "&datf=6",
sep = ""), referer = "http://www.finam.ru/analysis/export/default.asp",
verbose = verbose)
write(lts, file = tmp)
}
else {
stock.URL <- paste("http://", finam.HOST, stock.URL,
"&datf=1", sep = "")
download.file(stock.URL, destfile = tmp, quiet = !verbose)
}
fr <- read.csv(tmp, as.is = TRUE, colClasses = "character")
unlink(tmp)
if (verbose)
cat("done.\n")
if (p == 1) {
fr <- xts(apply(as.matrix(fr[, (5:6)]), 2, as.numeric),
as.POSIXct(strptime(paste(fr[, 3], fr[, 4]),
"%Y%m%d %H%M%S")), src = "finam", updated = Sys.time())
colnames(fr) <- paste(toupper(gsub("\\^", "", Symbols.name)),
c("Close", "Volume"), sep = ".")
}
else if (p > 7) {
fr <- xts(apply(as.matrix(fr[, (5:9)]), 2, as.numeric),
as.Date(strptime(fr[, 3], "%Y%m%d")), src = "finam",
updated = Sys.time())
colnames(fr) <- paste(toupper(gsub("\\^", "", Symbols.name)),
c("Open", "High", "Low", "Close", "Volume"),
sep = ".")
}
else {
fr <- xts(apply(as.matrix(fr[, (5:9)]), 2, as.numeric),
as.POSIXct(strptime(paste(fr[, 3], fr[, 4]),
"%Y%m%d %H%M%S")), src = "finam", updated = Sys.time())
colnames(fr) <- paste(toupper(gsub("\\^", "", Symbols.name)),
c("Open", "High", "Low", "Close", "Volume"),
sep = ".")
}
fr <- convert.time.series(fr = fr, return.class = return.class)
if (is.xts(fr) && p > 7)
indexClass(fr) <- index.class
Symbols[[i]] <- toupper(gsub("\\^", "", Symbols[[i]]))
if (auto.assign)
assign(Symbols[[i]], fr, env)
if (i >= 5 && length(Symbols) > 5) {
message("pausing 1 second between requests for more than 5 symbols")
Sys.sleep(1)
}
}
if (auto.assign)
return(Symbols)
return(fr)
}
ticker <- "SPFB.RTS"
from.date <- "2016-10-05"
to.date <- "2016-10-05"
period <- "15min"
data <- gS(ticker, from = from.date, to = to.date, src = "Finam", period = period, auto.assign = F)
library(rusquant)
library(quantmod)
library(magrittr)
library(rlist)
library(lpSolve)
library(corrplot)
library(tseries)
library(TTR)
trace(getSymbols.Finam, edit=T)
ticker <- "SPFB.RTS"
from.date <- "2016-01-01"
to.date <- "2016-11-31"
period <- "15min"
data <- getSymbols(ticker, from = from.date, to = to.date, src = "Finam", period = period, auto.assign = F)
colnames(data) = gsub(".*\\.", "", colnames(data))
data$Volume <- NULL
ticker <- "SPFB.RTS"
from.date <- "2016-01-01"
to.date <- "2016-11-30"
period <- "15min"
data <- getSymbols(ticker, from = from.date, to = to.date, src = "Finam", period = period, auto.assign = F)
ticker <- "SPFB.RTS"
from.date <- "2016-01-01"
to.date <- "2016-11-30"
period <- "day"
data <- getSymbols(ticker, from = from.date, to = to.date, src = "Finam", period = period, auto.assign = F)
colnames(data) = gsub(".*\\.", "", colnames(data))
data$Volume <- NULL
chart_Series(data)
View(data)
data$Days <- .indexwday(data) # День недели
data$Incr <- data$Close - data$Open
data$Pos <- ifelse(data$Incr > 0 , 1, 0)
data$Incr <- NULL
data <- data[data$Days == 5 & data$Days == 1,]
data <- data[data$Days == 5 || data$Days == 1,]
ticker <- "SPFB.RTS"
from.date <- "2016-01-01"
to.date <- "2016-11-30"
period <- "day"
data <- getSymbols(ticker, from = from.date, to = to.date, src = "Finam", period = period, auto.assign = F)
colnames(data) = gsub(".*\\.", "", colnames(data))
data$Volume <- NULL
chart_Series(data)
data$Days <- .indexwday(data) # День недели
# Up/down
data$Incr <- data$Close - data$Open
data$Pos <- ifelse(data$Incr > 0 , 1, 0)
data$Incr <- NULL
data <- subset(data , data[,5] == 5 & data[,5] == 1)
View(data)
ticker <- "SPFB.RTS"
from.date <- "2016-01-01"
to.date <- "2016-11-30"
period <- "day"
data <- getSymbols(ticker, from = from.date, to = to.date, src = "Finam", period = period, auto.assign = F)
colnames(data) = gsub(".*\\.", "", colnames(data))
data$Volume <- NULL
chart_Series(data)
data$Days <- .indexwday(data) # День недели
# Up/down
data$Incr <- data$Close - data$Open
data$Pos <- ifelse(data$Incr > 0 , 1, 0)
data$Incr <- NULL
data <- subset(data , data[,5] == 5)
View(data)
data <- subset(data , data[,5] == 5 & data[,5] == 1)
ticker <- "SPFB.RTS"
from.date <- "2016-01-01"
to.date <- "2016-11-30"
period <- "day"
data <- getSymbols(ticker, from = from.date, to = to.date, src = "Finam", period = period, auto.assign = F)
colnames(data) = gsub(".*\\.", "", colnames(data))
data$Volume <- NULL
chart_Series(data)
data$Days <- .indexwday(data) # День недели
# Up/down
data$Incr <- data$Close - data$Open
data$Pos <- ifelse(data$Incr > 0 , 1, 0)
data$Incr <- NULL
typeof(data$Days)
data <- as.data.frame(data)
new.data2 <- subset(data , data[,5] == 1 & data[,5] == 5)
View(data)
new.data2 <- subset(data , data[,5] == 1 && data[,5] == 5)
new.data2 <- subset(data , data[,5] == 1 & data[,5] == 5,)
library(rusquant)
library(quantmod)
library(magrittr)
library(rlist)
library(lpSolve)
library(corrplot)
library(tseries)
library(TTR)
# Загрузка данных
data <- getSymbols("SPFB.SBRF", from = "2014-01-01", to = "2014-12-31", src = "Finam", period = "day", auto.assign = F)
colnames(data) = gsub(".*\\.", "", colnames(data))
# Приращение, направлние свечи и блоки 5;12
data$Incr <- data$Close - lag(data$Close) # Приращение
data$Pos <- ifelse(data$Incr > 0.001000 , 1, 0) # Направление свечи
data <- na.omit(data)
Between <- function(n1){
sum(n1)/5
}
data$Roll <- rollapply(data$Pos, 5, Between, fill=NA, align='right') # Скользящее окно по направлению цены
Between1 <- function(n1){
sum(n1)/12
}
data$Rollm <- rollapply(data$Roll, 12, Between1, fill=NA, align='right') # Скользящее окно
data$Math <- abs(data$Roll - lag(data$Roll))
data <- as.data.frame(data)
# Формирование листов
index <- index(data)
data$Index <- index # Добавляем столбец с индексами таблицы
rollm <- data$Rollm # Блок 12
pos <- data$Pos[index+5] # Направление свечи по отношению к Блоку 12
data1 <- data.frame(rollm,pos) # Объединение информации в таблицу
q <- index+1
w <- index+4
len <- length(index)
for(i in 1:len){
text <- paste0("num.",index[i]," <- data$Pos[q[",i,"]:w[",i,"]]")
eval(parse(text=text))
}
data2 <- data.frame()
for(i in 1:len){
text <- paste0("list.",i," <- as.data.frame(list.append(num.",i,",data1[",i,",]))")
eval(parse(text=text))
}
x <- ls()
iom <- grep("list.", x) %>% x[.]
for(i in 1:len){
text1 <- paste0("names(",iom[i],") <- c('num1','num2','num3','num4','Rollm','Pos')")
eval(parse(text=text1))
}
for(i in 1:len){
text1 <- paste0("data2 <- rbind(data2,list.",i,")")
eval(parse(text=text1))
}
# Уборка мусора
for(i in 1:len){
text1 <- paste0("remove(list.",i,")")
eval(parse(text=text1))
}
# Логика выбора правильности направления
#num.101 <- as.data.frame(num.101)
#num.101 <- length(num.101[num.101$num.101 == 1,])
#1:num.101
Between2 <- function(n1,n2,n3){
if(n1 >= 0 & n1 <= 0.25){ # 1 свеча
ifelse(n2 >= 1 & n3 == 0, 1,  ifelse(n2 == 0 & n3 == 1, 1, 0))
}
else if(n1 >= 0.26 & n1 <= 0.50){ # 2 свечи
ifelse(n2 >= 2 & n3 == 0, 1,  ifelse(n2 <= 1 & n3 == 1, 1, 0))
}
else if(n1 >= 0.51 & n1 <= 0.75){ # 3 свечи
ifelse(n2 >= 3 & n3 == 0, 1,  ifelse(n2 <= 2 & n3 == 1, 1, 0))
}
else if(n1 >= 0.76){ # 4 свечи
ifelse(n2 >= 4 & n3 == 0, 1,  ifelse(n2 <= 3 & n3 == 1, 1, 0))
}
}
iom <- grep("num.", x) %>% x[.]
for(i in 1:len){
text1 <- paste0("num.",i," <- as.data.frame(num.",i,")")
eval(parse(text=text1))
}
for(i in 1:len){
text2 <- paste0("num.",i," <- length(num.",i,"[num.",i,"[1] == 1,])")
eval(parse(text=text2))
}
data3 <- data.frame()
for(i in 1:len){
text2 <- paste0("data3 <- rbind(data3, num.",i,")")
eval(parse(text=text2))
}
names(data3) <- "num"
copy.data2 <- data2
copy.data2$num <- data3$num
copy.data2 <- na.omit(copy.data2)
# Добавить в data
# Отрубить последние значения, так как там нет еще сделки
# 15 первых будут пусты постоянно, как и 5 последних значений
# Уборка мусора
for(i in 1:len){
text1 <- paste0("remove(num.",i,")")
eval(parse(text=text1))
}
#test <- Between2(copy.data2[980,5],copy.data2[980,7],copy.data2[980,6])
len <- length(copy.data2$num1)
for(i in 1:len){
text2 <- paste0("res.",i," <- Between2(copy.data2[",i,",5],copy.data2[",i,",7],copy.data2[",i,",6])")
eval(parse(text=text2))
}
x <- ls()
iom <- grep("res.", x) %>% x[.]
data4 <- data.frame()
for(i in 1:len){
text2 <- paste0("data4 <- rbind(data4, res.",i,")")
eval(parse(text=text2))
}
length(data4[data4[,1] == 0,]);length(data4[data4[,1] == 1,])
test <- data.frame(data$Close, data$Low, data$Pos ,data$Roll, data$Math)
colnames(test) = gsub(".*\\.", "", colnames(test))
test <- na.omit(test)
x <- test[test[,2] == 1,]
x <- x[x[,3] == 0.8,];
x <- x[x$Math == 0.0,]
#
for(i in 1:len){
text <- paste0("rle.",index[i]," <- rle(num.",i,")[[1]]")
eval(parse(text=text))
}
x <- ls()
iom <- grep("rle.", x) %>% x[.]
test <- data.frame()
for(i in 1:len){
text <- paste0("test <- rbind(test, rle.",i,")")
eval(parse(text=text))
}
rolik <- test[1:2]
copy.data3 <- copy.data2
copy.data3$line1 <- rolik[1]
copy.data3$line2 <- rolik[2]
new.data2 <- subset(copy.data3 , copy.data3[,8] < 3 & copy.data3[,9] < 3)
ticker <- "SPFB.RTS"
from.date <- "2016-01-01"
to.date <- "2016-11-30"
period <- "day"
data <- getSymbols(ticker, from = from.date, to = to.date, src = "Finam", period = period, auto.assign = F)
colnames(data) = gsub(".*\\.", "", colnames(data))
data$Volume <- NULL
chart_Series(data)
data$Days <- .indexwday(data) # День недели
# Up/down
data$Incr <- data$Close - data$Open
data$Pos <- ifelse(data$Incr > 0 , 1, 0)
data$Incr <- NULL
View(data)
install.packages("rusquant", repos="http://R-Forge.R-project.org", type="source")
library(rusquant)
library(quantmod)
library(magrittr)
library(rlist)
library(lpSolve)
source("packages/libfun.R")
from.date <- "2013-09-26" # Параметр для изменения !!!
to.date <- "2014-09-26" # Параметр для изменения !!!
period <- "day" # Параметр для изменения !!!
# Первая корзина
tickers1 <- c("LKOH", "GAZP") # Параметр для изменения !!!
list1 <- BasFun1(tickers1,from.date,to.date,period) # Первая корзина
# Вторая корзина
tickers2 <- c("SBER") # Параметр для изменения !!!
list2 <- BasFun1(tickers2,from.date,to.date,period) # Вторая корзина
# Ввод индекса
tickers3 <- c("MICEX") # Параметр для изменения !!!
list3 <- BasFun1(tickers3,from.date,to.date,period) # Вторая корзина
View(list1)
sort(tickers1)
# Приращения, ковариация, дисперсия индекса и беты
incr.bas1 <- Increment(list1) # Приращение первой корзины
incr.bas2 <- Increment(list2) # Приращение второй корзины
incr.index <- Increment(list3) # Приращение индекса
var.index <- as.numeric(lapply(incr.index, function(x) var(x))) # Дисперсия индекса
covar.bas1 <- Covar(incr.bas1) # Ковариация первой корзины
covar.bas2 <- Covar(incr.bas2) # Ковариация второй корзины
beta.bas1 <- lapply(covar.bas1, function(x) Beta(x)) # Беты первой корзины
beta.bas2 <- lapply(covar.bas2, function(x) Beta(x)) # Беты второй корзины
irrfac <- Irr(tickers1,tickers2) # Коэффициент неравномерности
sum.betaall <- Summa(beta.bas1, beta.bas2) # Общая сумма бет в двух корзинах
inter.bas1 <- Inter2(beta.bas1,beta.bas2) # Расчет корзин
inter.bas2 <- Inter4(beta.bas1,beta.bas2) # Расчет корзин
# сумма весов двух корзин
sum.weightall <- Summa(inter.bas1, inter.bas2) # Общая сумма весов в двух корзинах
weightper.basall <- WeightCOOL(inter.bas1,inter.bas2) # Идеальный вес в процентах
# Спецификация контрактов (количество лотов)
tick1 <- tickers1 #
tick2 <- tickers2 #
# tick1 вывести для вписания правильного значения лотов
writing1 <- c(10,100) # Параметры для изменения !!!
# tick2 вывести для вписания правильного значения лотов
writing2 <- c(100) # Параметры для изменения !!!
# Средние цены, ср.цены с учетом лотов, сумма ср.цен с лотами в двух корзинах
price.info <- PriceInfo(list1,list2)
View(price.info)
