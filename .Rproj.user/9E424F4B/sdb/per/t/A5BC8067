{
    "collab_server" : "",
    "contents" : "# libfun\n\n\n# Загрузка котировок\nBasFun1 <- function(n1,n2,n3,n4){\n  n.ticker <- length(n1)\n  for(i in 1:n.ticker){\n    data <- getSymbols(n1[i], from = n2, to = n3, period = n4, src = \"Finam\", auto.assign = T)\n    text <- paste0(\"bas1.\",n1[i],\" <- \",n1[i],\"[,4]\")\n    eval(parse(text=text))\n  }\n  list1 <- list()\n  for(i in 1:n.ticker){\n    text <- paste0('list1 <- list.append(list1, bas1.',n1[i],')')\n    eval(parse(text=text))\n  }\n  list1 <- do.call(merge, list1)\n  return(list1) \n}\n\n# Приращение\nIncrement <- function(n1){\n  x <- as.data.frame(log(n1 / lag(n1)))\n  x[is.na(x)] <- 0\n  return(x)\n}\n\n# Ковариация\nCovar <- function(n1){\n  cov(incr.index, n1) \n}\n\n# Беты\nBeta <- function(n1){\n  n1/var.index\n}\n\n# Коэффициент неравномерности (большую должны делить на меньшую)\nIrr <- function(n1,n2){\n  x1 <- length(n1)\n  x2 <- length(n2)\n  if(x1 < x2){\n    z <- x2/x1\n  }\n  else{\n    z <- x1/x2\n  }\n  return(z)\n}\n\n# Расчет суммы\nSumma <- function(n1,n2){\n  x1 <- rowSums(as.data.frame(n1))\n  x2 <- rowSums(as.data.frame(n2))\n  x3 <- x1 + x2\n  return(x3)\n} \n\n# Расчет первой корзины по отношению ко второй\nInter2 <- function(n1,n2){\n  x1 <- length(n1)\n  x2 <- length(n2)\n  Inter1 <- function(n1){\n    sum.betaall/n1*irrfac\n  }\n  if(x1 < x2){\n    z <- lapply(n1, function(x) Inter1(x))\n  }\n  else\n  {\n    z <- lapply(n2, function(x) Inter1(x))\n  }\n  return(z)\n}\n\nInter4 <- function(n1,n2){\n  x1 <- length(n1)\n  x2 <- length(n2)\n  Inter3 <- function(n1){\n    sum.betaall/n1\n  }\n  if(x1 > x2){\n    z <- lapply(n1, function(x) Inter3(x))\n  }\n  else\n  {\n    z <- lapply(n2, function(x) Inter3(x))\n  }\n  return(z)\n}\n\n# Идеальный вес в процентах\nWeightCOOL <- function(n1,n2){\n  x1 <- n1\n  x2 <- n2\n  y1 <- length(inter.bas1)\n  y2 <- length(inter.bas2)\n  z1 <- length(tickers1)\n  z2 <- length(tickers1)\n  Weightcool <- function(n1){\n    n1/sum.weightall*100\n  }\n  weightper.bas1 <- lapply(x1, function(x) Weightcool(x)) \n  weightper.bas2 <- lapply(x2, function(x) Weightcool(x))\n  weightper.basall <- list()\n  if(y1 == z1){\n    weightper.basall <- list.append(weightper.basall, weightper.bas1, weightper.bas2)\n    weightper.basall <- round(as.numeric(as.data.frame(weightper.basall)), digits = 3)\n  }\n  else{\n    weightper.basall <- list.append(weightper.basall, weightper.bas2, weightper.bas1)\n    weightper.basall <- round(as.numeric(as.data.frame(weightper.basall)), digits = 3)\n  }\n  return(weightper.basall)\n}\n\nPriceInfo <- function(n1,n2,n3,n4)\n{\n  ob.mean.bas1 <- as.data.frame(as.list(colMeans(n1, na.rm = T))) # mean.bas1\n  ob.mean.bas2 <- as.data.frame(as.list(colMeans(n2, na.rm = T))) # mean.bas1\n  ob.price1 <- round(ob.mean.bas1, digits = 3) * n3 # Цена первой корзины с учетом лотов для фьючерсов # price1\n  ob.price2 <- round(ob.mean.bas2, digits = 3) * n4 # Цена второй корзины с учетом лотов для фьючерсов # price2 \n  ob.sum.meanall <- rowSums(ob.price1) + rowSums(ob.price2) # Общая сумма цен с лотами в двух корзинах # sum.meanall\n  x <- ls()\n  vec <- grep(\"ob.\", x) %>% x[.]\n  len <- length(vec)\n  list4 <- list()\n  for(i in 1:len){\n    text <- paste0('list4 <- list.append(list4,',vec[i],')')\n    eval(parse(text=text))\n  }\n  return(list4)\n}\n\n# Создание комбинации и объединение корзин\nFunCOMBIN <- function(n1,n2,n3,n4){\n  length.basaall <- length(n1) + length(n2) # Количество инструментов в корзинах\n  meanbas.all <- list() # Empty list\n  m1 <- n3\n  m2 <- n4\n  meanbas.all <- round(unlist(list.append(meanbas.all, m1, m2)), digits = 3) # Объединение двух корзин в вектор\n  lotik <- seq(1,8,by=1) # Создание комбинации\n  combin <- matrix(rep(lotik, length.basaall), ncol = length.basaall)\n  combin <- expand.grid(as.data.frame.matrix(combin)) # Готовая комбинация\n  combin.basall <- data.frame(mapply(`*`,combin,meanbas.all)) # Цена с учетом лотов\n  combin.sum <- as.data.frame(rowSums(combin.basall)) # сумма цен с лотами\n  combin.percent <- round(data.frame(mapply(`/`,combin.basall,combin.sum))*100, digits = 3) # \n  combin.percent <- as.data.frame(list.append(combin.percent, combin))\n  weightper.basall <- weightper.basall \n  Result <- function(n1,n2){\n    com <- n1\n    wec <- n2\n    two <- com\n    copy.two <- two\n    copy.two$TWO <- copy.two[,1] + copy.two[,2]\n    copy.two$IDTWO <- wec[1] + wec[2]\n    copy.two$ReTWO <- abs(copy.two$IDTWO - copy.two$TWO)\n    three <- copy.two[copy.two$ReTWO <= 12,]\n    three$V1R <- abs(wec[1] - three$V1)\n    four <- three[three$V1R <= 3,]\n    four$V2R <- abs(wec[2] - four$V2)\n    five <- four[four$V2R <= 3,]\n  }\n  lot <- Result(combin.percent,weightper.basall[1:2])\n  return(lot)\n}\n\nResult <- function(n1,n2){\n  com <- n1\n  wec <- n2\n  two <- com\n  copy.two <- two\n  copy.two$TWO <- copy.two[,1] + copy.two[,2]\n  copy.two$IDTWO <- wec[1] + wec[2]\n  copy.two$ReTWO <- abs(copy.two$IDTWO - copy.two$TWO)\n  three <- copy.two[copy.two$ReTWO <= 12,]\n  three$V1R <- abs(wec[1] - three$V1)\n  four <- three[three$V1R <= 3,]\n  four$V2R <- abs(wec[2] - four$V2)\n  five <- four[four$V2R <= 3,]\n}\n\n# Спред\nSpread <- function(){\n  bas1.sum <- as.data.frame(list1) # Date.frame\n  bas1.sum <- data.frame(mapply(`*`,bas1.sum,writing1)) # Корректируем цены для фьючерсов\n  bas1.sum <- data.frame(mapply(`*`,bas1.sum,lot.spread1)) # Умножаем на количество лотов, которые мы выбрали для первой корзины\n  bas1.sum <- as.data.frame(rowSums(bas1.sum)) # сумма цен с лотами\n  \n  bas2.sum <- as.data.frame(list2) # Date.frame\n  bas2.sum <- data.frame(mapply(`*`,bas2.sum,writing2)) # Корректируем цены для фьючерсов\n  bas2.sum <- data.frame(mapply(`*`,bas2.sum,lot.spread2)) # Умножаем на количество лотов, которые мы выбрали для второй корзины\n  bas2.sum <- as.data.frame(rowSums(bas2.sum)) # сумма цен с лотами\n  \n  basall.spread <- abs(bas1.sum - bas2.sum) \n  a <- plot(basall.spread[,1], type = \"l\") # График спреда\n  min.spread <- min(basall.spread[,1]); max.spread <- max(basall.spread[,1])\n  mean.spread <- c(min.spread, max.spread)\n  mean.spread <- abs(mean(mean.spread)) # Средний спред\n  abline(h = mean.spread, col = \"red\", lw = 2) # Линия среднего спреда на графике\n}",
    "created" : 1478511096637.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1247189858",
    "id" : "A5BC8067",
    "lastKnownWriteTime" : 1478510956,
    "last_content_update" : 1478510956,
    "path" : "~/GitHub/Project/packages/libfun.R",
    "project_path" : "packages/libfun.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}